@page "/secure/units"
@attribute [Authorize(Roles = $"{Roles.MembershipChair},{Roles.Committee}")]
@rendermode InteractiveAuto
@inject IJSRuntime JS

<h3>Units</h3>

<AutoQueryGrid Model="Unit" Apis="Apis.AutoQuery<QueryUnits, CreateUnit, UpdateUnit, DeleteUnit>()">
    <Columns>
        <Column Field="(Unit x) => x.DistrictId">
            <Header>District</Header>
            <Template>
                @context.District.Description
            </Template>
        </Column>
        <Column Field="(Unit x) => x.Sex" />
        <Column Field="(Unit x) => x.Type" />
        <Column Field="(Unit x) => x.Number" />
        <Column Field="(Unit x) => x.NotesLink" VisibleFrom="Breakpoint.Large" />
        <Column Field="(Unit x) => x.EventsLink" VisibleFrom="Breakpoint.ExtraLarge" />
        <Column Field="(Unit x) => x.SchoolsLink" VisibleFrom="Breakpoint.ExtraLarge2x" />
    </Columns>
</AutoQueryGrid>

@code {
    [Inject] public JsonApiClient? Client { get; set; }
    IHasErrorStatus? Api { get; set; }
    Type ApiType = typeof(UpdateUnit);
    List<InputInfo>? FormLayout { get; set; }
    Dictionary<string, object> ModelDictionary { get; set; } = new();
    MetadataType MetadataType => ApiType.ToMetadataType();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Api = null;

        FormLayout ??= MetadataType.CreateFormLayout<Unit>();
    }

    async Task submit()
    {
        var request = ModelDictionary.FromModelDictionary<UpdateUnit>();
        Api = await Client!.ApiAsync(request);
    }
}
